// Generated by CoffeeScript 1.4.0
var APNContext, Account, OAuth, StreamContext, apns, app, db, events, express, http, schema,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

http = require('http');

events = require('events');

apns = require('apn');

db = require('mongoose');

express = require('express');

OAuth = require('oauth').OAuth;

StreamContext = (function(_super) {

  __extends(StreamContext, _super);

  function StreamContext(options) {
    this.options = options;
    this.start = __bind(this.start, this);

    this._dispatch = __bind(this._dispatch, this);

    this._onResponse = __bind(this._onResponse, this);

    this._stop = false;
  }

  StreamContext.prototype._makeRequest = function() {
    var oauth, oauth_header;
    oauth = new OAuth(null, null, this.option.consumer_token, this.option.consumer_secret, "1.0", null, "HMAC-SHA1");
    oauth_header = oauth.authHeader('http://stream.fanfou.com/1/user.json', this.option.oauth_token, this.option.oauth_secret);
    return http.request({
      host: 'stream.fanfou.com',
      path: '/1/user.json',
      headers: [
        {
          'Authorization': oauth_header
        }
      ]
    });
  };

  StreamContext.prototype._onResponse = function(resp) {
    this._lastChunk = "";
    if (resp.code !== 200) {
      this.emit('error', new Error("Bad HTTP status code returned: " + resp.code));
      return;
    }
    resp.setEncoding('utf8');
    resp.on('close', function() {
      return setTimeout(this.start, 0);
    });
    return resp.on('data', function(data) {
      var chunk, obj, pos;
      console.info(data.length);
      this.lastChunk += data;
      while ((pos = lastChunk.indexOf('\r\n')) >= 0) {
        chunk = this.lastChunk.substr(0, pos);
        this.lastChunk = this.lastChunk.substr(pos + 2);
        if (chunk !== "") {
          try {
            obj = JSON.parse(chunk);
            console.info(obj.event);
            this._dispatch(obj);
          } catch (e) {
            console.error(chunk, e);
          }
        }
        return;
      }
    });
  };

  StreamContext.prototype._dispatch = function(data) {
    return this.emit(data.event, data);
  };

  StreamContext.prototype.start = function() {
    var req;
    if (this._stop) {
      return;
    }
    req = this._makeRequest();
    req.on('response', this._onResponse);
    return req.end();
  };

  StreamContext.prototype.stop = function() {
    this._stop = true;
    return this._resp.destroy();
  };

  return StreamContext;

})(events.EventEmitter);

APNContext = (function() {

  function APNContext(options) {
    this.options = options;
    this.onFriendRequest = __bind(this.onFriendRequest, this);

    this.onNewFollower = __bind(this.onNewFollower, this);

    this.onFavourite = __bind(this.onFavourite, this);

    this.onPrivateMessage = __bind(this.onPrivateMessage, this);

    this.onMessage = __bind(this.onMessage, this);

    this._stream = new StreamContext(this.options);
    this._device = new apns.Device(this.options.device_token);
    this._stream.on('message.create', this.onMessage);
    this._stream.on('friends.create', this.onNewFollower);
    this._stream.on('friends.request', this.onFriendRequest);
    this._stream.on('fav.create', this.onFavourite);
    this._stream.on('dm.create', this.onPrivateMessage);
    this._stream.on('error', function(err) {
      return console.error(err);
    });
  }

  APNContext.prototype.update = function(options) {
    this.options = options;
    return this._stream.options = this.options;
  };

  APNContext.prototype.start = function() {
    return this._stream.start();
  };

  APNContext.prototype.onMessage = function(evt) {
    var info, msg;
    if (evt.target.id !== this.options.user_id) {
      return;
    }
    if (!this.options.flags.mention) {
      return;
    }
    msg = {
      'loc-key': 'AT',
      'loc-args': [evt.source.name, evt.object.content.substr(0, 40)]
    };
    info = {
      type: 'at',
      id: evt.object.id,
      user: this.options.user_id
    };
    return this.sendNotification(msg, info);
  };

  APNContext.prototype.onPrivateMessage = function(evt) {
    var info, msg;
    if (evt.target.id !== this.options.user_id) {
      return;
    }
    if (!this.options.flags.direct_message) {
      return;
    }
    msg = {
      'loc-key': 'DM',
      'loc-args': [evt.source.name, evt.object.content.substr(0, 40)]
    };
    info = {
      type: 'dm',
      id: evt.object.id,
      user: this.options.user_id
    };
    return this.sendNotification(msg, info);
  };

  APNContext.prototype.onFavourite = function(evt) {
    var info, msg;
    if (evt.target.id !== this.options.user_id) {
      return;
    }
    if (!this.options.flags.favourite) {
      return;
    }
    msg = {
      'loc-key': 'FAV',
      'loc-args': [evt.source.name, evt.object.content.substr(0, 40)]
    };
    info = {
      type: 'fav',
      id: evt.object.id,
      user: this.options.user_id
    };
    return this.sendNotification(msg, info);
  };

  APNContext.prototype.onNewFollower = function(evt) {
    var info, msg;
    if (evt.target.id !== this.options.user_id) {
      return;
    }
    if (!this.options.flags.follow_create) {
      return;
    }
    msg = {
      'loc-key': 'NF',
      'loc-args': [evt.source.name]
    };
    info = {
      type: 'nf',
      id: evt.source.id,
      user: this.options.user_id
    };
    return this.sendNotification(msg, info);
  };

  APNContext.prototype.onFriendRequest = function(evt) {
    var info, msg;
    if (evt.target.id !== this.options.user_id) {
      return;
    }
    if (!this.options.flags.follow_request) {
      return;
    }
    msg = {
      'loc-key': 'FR',
      'loc-args': [evt.source.name]
    };
    info = {
      type: 'fav',
      id: evt.source.id,
      user: this.options.user_id
    };
    return this.sendNotification(msg, info);
  };

  APNContext.prototype.sendNotification = function(msg, payload) {
    var note;
    note = new apns.Notification();
    note.encoding = 'ucs2';
    note.expiry = Math.floor(Date.now() / 1000) + 3600;
    note.badge = 1;
    note.sound = "ping.aiff";
    note.alert = msg;
    note.payload = payload;
    note.device = this.device;
    note._id = this.options._id;
    note._ctx = this;
    return APNContext._conn.sendNotification(note);
  };

  APNContext._conn = new apns.Connection({
    cert: 'gohan_apns_development.crt',
    key: 'gohan_apns_development.key',
    gateway: 'gateway.sandbox.push.apple.com'
  });

  APNContext._activeContexts = {};

  APNContext.updateOrCreate = function(acc) {
    var ctx;
    if (ctx = this._activeContexts[acc._id]) {
      return ctx.update(acc);
    } else {
      ctx = new this(acc);
      this._activeContexts[id] = ctx;
      return ctx.start();
    }
  };

  return APNContext;

})();

schema = db.Schema({
  udid: String,
  user_id: String,
  device_token: String,
  oauth_token: String,
  oauth_secret: String,
  consumer_token: String,
  consumer_secret: String,
  flags: db.Schema.Types.Mixed
});

schema.index({
  user_id: 1,
  udid: 1,
  unique: true
});

schema.methods.updateProp = function(props) {
  var _this = this;
  return this.schema.eachPath(function(name) {
    if (props.hasOwnProperty(name)) {
      return _this[name] = props[name];
    }
  });
};

Account = db.model('Account', schema);

app = new express;

app.enable('trust proxy');

app.use(express.favicon());

app.use(express.logger('dev'));

app.use(express.bodyParser());

app.get('/', function(req, resp) {
  return resp.redirect('http://imach.me/gohanapp');
});

app.post('/token/:udid/:user_id', function(req, resp) {
  var c;
  c = {
    udid: req.params.udid,
    user_id: req.param.user_id
  };
  return Account.findOne(c, function(err, obj) {
    if (err) {
      return resp.send(500, err);
    }
    if (!obj) {
      obj = new Account(c);
    }
    obj.updateProps(req.body);
    return obj.save(function(err, obj) {
      if (err) {
        return resp.send(500, err);
      }
      APNContext.updateOrCreate(obj);
      return resp.send(200, obj);
    });
  });
});

app["delete"]('/token/:udid/:user_id', function(req, resp) {
  var c;
  c = {
    udid: req.params.udid,
    user_id: req.param.user_id
  };
  return Account.findOne(c, function(err, obj) {
    if (err) {
      return resp.send(500, err);
    }
    if (!obj) {
      return resp.send(404, {
        msg: 'Not found'
      });
    }
    return obj.remove();
  });
});

app.listen(8080, '0.0.0.0');
